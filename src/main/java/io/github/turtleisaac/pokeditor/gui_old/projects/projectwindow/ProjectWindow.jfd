JFDML JFormDesigner: "7.0.5.1.409" Java: "11.0.13" encoding: "UTF-8"

new FormModel {
	contentType: "form/swing"
	root: new FormRoot {
		add( new FormWindow( "javax.swing.JFrame", new FormLayoutManager( class net.miginfocom.swing.MigLayout ) {
			"$layoutConstraints": "hidemode 3"
			"$columnConstraints": "[853,grow,fill]"
			"$rowConstraints": "[][63,grow,top]"
		} ) {
			name: "this"
			"title": "PokEditor"
			"minimumSize": new java.awt.Dimension( 600, 500 )
			addEvent( new FormEvent( "java.awt.event.WindowListener", "windowClosing", "thisWindowClosing", true ) )
			add( new FormComponent( "javax.swing.JSeparator" ) {
				name: "separator2"
				"border": new javax.swing.border.SoftBevelBorder( 1, null, null, null, null )
			}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
				"value": "cell 0 0,grow"
			} )
			add( new FormContainer( "javax.swing.JTabbedPane", new FormLayoutManager( class javax.swing.JTabbedPane ) ) {
				name: "tabbedPane1"
				add( new FormContainer( "javax.swing.JPanel", new FormLayoutManager( class net.miginfocom.swing.MigLayout ) {
					"$layoutConstraints": "hidemode 3"
					"$columnConstraints": "[grow,fill][grow,fill]"
					"$rowConstraints": "[54,fill][fill][fill][fill][grow,fill][fill][bottom]"
				} ) {
					name: "mainPanel"
					add( new FormComponent( "javax.swing.JButton" ) {
						name: "sheetsSetupButton"
						"text": "Sheets Setup"
						"toolTipText": "Click this to configure a link with the Google Sheets API or a local sheet repository."
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "sheetsSetupButtonActionPerformed", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 0 2 1,grow"
					} )
					add( new FormComponent( "javax.swing.JLabel" ) {
						name: "linkTextField"
						"enabled": false
						addEvent( new FormEvent( "java.awt.event.MouseListener", "mouseClicked", "linkTextFieldMouseClicked", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 1 2 1,alignx center,growx 0"
					} )
					add( new FormComponent( "javax.swing.JComboBox" ) {
						name: "sheetChooserComboBox"
						"enabled": false
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "sheetChooserComboBoxActionPerformed", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 2 2 1"
					} )
					add( new FormComponent( "javax.swing.JButton" ) {
						name: "applyToSheetButton"
						"text": "Apply ROM to Sheets"
						"enabled": false
						"toolTipText": "Data from game files is copied into sheets."
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "applyToSheetButtonActionPerformed", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 3"
					} )
					add( new FormComponent( "javax.swing.JButton" ) {
						name: "applyToRomButton"
						"text": "Apply Sheets to ROM"
						"enabled": false
						"toolTipText": "Data from sheets is applied to game files."
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "applyToRomButtonActionPerformed", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 1 3"
					} )
					add( new FormContainer( "javax.swing.JScrollPane", new FormLayoutManager( class javax.swing.JScrollPane ) ) {
						name: "sheetPreviewScrollPane"
						"horizontalScrollBarPolicy": 32
						"verticalScrollBarPolicy": 22
						add( new FormComponent( "javax.swing.JTable" ) {
							name: "sheetPreviewTable"
							"enabled": false
							"gridColor": new java.awt.Color( 0, 0, 0, 255 )
							"maximumSize": new java.awt.Dimension( 2147483647, 2147483647 )
							"rowSelectionAllowed": false
							"cellSelectionEnabled": true
							auxiliary() {
								"JavaCodeGenerator.postInitCode": "//sheetPreviewTable.setDefaultRenderer(Object.class, new PaintTableCellRenderer());\nsheetPreviewTable.setIntercellSpacing(new Dimension(0,0));\nsheetPreviewTable.setRowMargin(0);\nsheetPreviewTable.getTableHeader().setBorder(BorderFactory.createLineBorder(Color.BLACK,1));"
							}
						} )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 4 2 1,grow"
					} )
					add( new FormComponent( "javax.swing.JButton" ) {
						name: "sheetRefreshChangesButton"
						"text": "Reload Sheets"
						"enabled": false
						"toolTipText": "Reloads sheets with the last saved data."
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "sheetRefreshChangesButtonActionPerformed", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 5,growx"
					} )
					add( new FormComponent( "javax.swing.JButton" ) {
						name: "sheetUploadChangesButton"
						"text": "Save Sheet Changes"
						"enabled": false
						"toolTipText": "Saves local changes made in the preview window"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "sheetUploadChangesButtonActionPerformed", true ) )
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 1 5,growx"
					} )
					add( new FormComponent( "javax.swing.JLabel" ) {
						name: "warningLabel"
						"text": "No warnings to display"
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 6 2 1,alignx center,growx 0"
					} )
				}, new FormLayoutConstraints( null ) {
					"title": "Main"
				} )
				add( new FormComponent( "com.turtleisaac.pokeditor.gui.editors.trainers.TrainerPanel" ) {
					name: "trainerPanel1"
					auxiliary() {
						"JavaCodeGenerator.customCreateCode": "new TrainerPanel(this);"
					}
				}, new FormLayoutConstraints( null ) {
					"title": "Trainer Editor"
				} )
				add( new FormComponent( "com.turtleisaac.pokeditor.gui.editors.encounters.sinnoh.SinnohEncounterPanel" ) {
					name: "sinnohEncounterPanel"
				}, new FormLayoutConstraints( null ) {
					"title": "Encounter Editor"
				} )
				add( new FormComponent( "com.turtleisaac.pokeditor.gui.editors.encounters.johto.JohtoEncounterPanel" ) {
					name: "johtoEncounterPanel"
				}, new FormLayoutConstraints( null ) {
					"title": "Encounter Editor"
				} )
				add( new FormComponent( "com.turtleisaac.pokeditor.gui.editors.sprites.pokemon.PokemonSpritePanel" ) {
					name: "pokemonSpritePanel"
				}, new FormLayoutConstraints( null ) {
					"title": "Pok√©mon Sprites"
				} )
				add( new FormContainer( "javax.swing.JPanel", new FormLayoutManager( class net.miginfocom.swing.MigLayout ) {
					"$layoutConstraints": "hidemode 3"
					"$columnConstraints": "[fill][fill]"
					"$rowConstraints": "[][][]"
				} ) {
					name: "starterPanel"
					add( new FormComponent( "javax.swing.JLabel" ) {
						name: "label1"
						"text": "You were expecting a starter editor, but it was me, Dio!"
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 0"
					} )
				}, new FormLayoutConstraints( null ) {
					"title": "Starters"
					"enabled": false
				} )
				add( new FormContainer( "javax.swing.JPanel", new FormLayoutManager( class net.miginfocom.swing.MigLayout ) {
					"$layoutConstraints": "hidemode 3"
					"$columnConstraints": "[fill][fill]"
					"$rowConstraints": "[][][]"
				} ) {
					name: "openingPanel"
					add( new FormComponent( "javax.swing.JLabel" ) {
						name: "label3"
						"text": "You were expecting an opening cutscene editor, but it was me, Dio!"
					}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
						"value": "cell 0 0"
					} )
				}, new FormLayoutConstraints( null ) {
					"title": "Cutscenes"
					"enabled": false
				} )
				add( new FormComponent( "com.turtleisaac.pokeditor.gui.editors.sprites.trainers.TrainerSpritePanel" ) {
					name: "trainerSpritePanel"
				}, new FormLayoutConstraints( null ) {
					"title": "Trainer Sprites"
					"enabled": false
				} )
				add( new FormContainer( "javax.swing.JPanel", new FormLayoutManager( class net.miginfocom.swing.MigLayout ) {
					"$layoutConstraints": "hidemode 3"
					"$columnConstraints": "[fill][fill]"
					"$rowConstraints": "[][][]"
				} ) {
					name: "overworldSpritePanel"
				}, new FormLayoutConstraints( null ) {
					"title": "Overworld Sprites"
					"enabled": false
				} )
			}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
				"value": "cell 0 1"
			} )
			add( new FormContainer( "javax.swing.JToolBar", new FormLayoutManager( class javax.swing.JToolBar ) ) {
				name: "jtbMain"
				"borderPainted": false
				"componentOrientation": sfield java.awt.ComponentOrientation LEFT_TO_RIGHT
				"floatable": false
				add( new FormComponent( "javax.swing.JButton" ) {
					name: "openProjectButton"
					"maximumSize": new java.awt.Dimension( 40, 40 )
					"minimumSize": new java.awt.Dimension( 40, 40 )
					"preferredSize": new java.awt.Dimension( 40, 40 )
					"icon": new com.jformdesigner.model.SwingIcon( 2, "Tree.openIcon" )
					"toolTipText": "Open Project"
					addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "openProjectButtonActionPerformed", true ) )
				} )
				add( new FormComponent( "javax.swing.JToolBar$Separator" ) {
					name: "toolBarSeparator1"
				} )
				add( new FormComponent( "javax.swing.JButton" ) {
					name: "exportRomButton"
					"preferredSize": new java.awt.Dimension( 40, 40 )
					"maximumSize": new java.awt.Dimension( 40, 40 )
					"minimumSize": new java.awt.Dimension( 40, 40 )
					"icon": new com.jformdesigner.model.SwingIcon( 2, "FileView.hardDriveIcon" )
					"toolTipText": "Export ROM"
					addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "exportRomButtonActionPerformed", true ) )
				} )
				add( new FormComponent( "javax.swing.JToolBar$Separator" ) {
					name: "toolBarSeparator2"
				} )
				add( new FormComponent( "com.jformdesigner.designer.wrapper.HSpacer" ) {
					name: "toolBarHorizontalSeparator"
				} )
				add( new FormComponent( "javax.swing.JToolBar$Separator" ) {
					name: "toolBarSeparator3"
				} )
				add( new FormComponent( "javax.swing.JButton" ) {
					name: "baseRomButton"
					"maximumSize": new java.awt.Dimension( 110, 40 )
					"minimumSize": new java.awt.Dimension( 110, 40 )
					"preferredSize": new java.awt.Dimension( 110, 40 )
					"icon": new com.jformdesigner.model.SwingIcon( 2, "FileView.fileIcon" )
					"text": "ROM Info"
					"toolTipText": "ROM Info"
					addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "baseRomButtonActionPerformed", true ) )
				} )
				add( new FormComponent( "javax.swing.JToolBar$Separator" ) {
					name: "toolBarSeparator4"
				} )
				add( new FormComponent( "javax.swing.JButton" ) {
					name: "projectInfoButton"
					"text": "Project Info"
					"maximumSize": new java.awt.Dimension( 110, 40 )
					"minimumSize": new java.awt.Dimension( 110, 40 )
					"preferredSize": new java.awt.Dimension( 110, 40 )
					"toolTipText": "Project Info"
					addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "projectInfoButtonActionPerformed", true ) )
				} )
			}, new FormLayoutConstraints( class net.miginfocom.layout.CC ) {
				"value": "north"
			} )
			menuBar: new FormContainer( "javax.swing.JMenuBar", new FormLayoutManager( class javax.swing.JMenuBar ) ) {
				name: "menuBar"
				add( new FormContainer( "javax.swing.JMenu", new FormLayoutManager( class javax.swing.JMenu ) ) {
					name: "fileMenu"
					"text": "File"
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "openProjectItem"
						"text": "Open Project"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "openProjectItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "openRecentItem"
						"text": "Open Recent"
					} )
					add( new FormComponent( "javax.swing.JPopupMenu$Separator" ) {
						name: "separator1"
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "importRomItem"
						"text": "Import ROM"
						"toolTipText": "Re-bases this project on a different ROM of the same game"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "importRomItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "exportRomItem"
						"text": "Export ROM"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "exportRomItemActionPerformed", true ) )
					} )
				} )
				add( new FormContainer( "javax.swing.JMenu", new FormLayoutManager( class javax.swing.JMenu ) ) {
					name: "sheetsMenu"
					"text": "Sheets"
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "integrationSetupItem"
						"text": "Integration Setup"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "integrationSetupItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "migrationItem"
						"text": "Migration Utility"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "migrationItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "applyToSheetItem"
						"text": "Apply ROM to Sheets"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "applyToSheetItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "applyToRomItem"
						"text": "Apply Sheets to ROM"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "applyToRomItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "sheetRefreshChangesItem"
						"text": "Refresh Sheet from Google Sheets"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "sheetRefreshChangesItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "sheetUploadChangesItem"
						"text": "Upload Changes to Google Sheets"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "sheetUploadChangesItemActionPerformed", true ) )
					} )
				} )
				add( new FormContainer( "javax.swing.JMenu", new FormLayoutManager( class javax.swing.JMenu ) ) {
					name: "editorMenu"
					"text": "Editor Pop"
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "popTrainersMenuItem"
						"text": "Pop Trainer Editor"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "popTrainersMenuItem", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "popEncountersMenuItem"
						"text": "Pop Encounter Editor"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "popEncountersMenuItem", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "popPokemonSpritesMenuItem"
						"text": "Pop Pok√©mon Sprite Editor"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "popPokemonSpritesMenuItem", true ) )
					} )
				} )
				add( new FormContainer( "javax.swing.JMenu", new FormLayoutManager( class javax.swing.JMenu ) ) {
					name: "toolsMenu"
					"text": "Tools"
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "randomizerItem"
						"text": "Randomizer"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "randomizerItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "narctowlItem"
						"text": "Narctowl"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "narctowlItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "blzCoderItem"
						"text": "BLZ Coder"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "blzCoderItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "fileRandomizerItem"
						"text": "File Randomizer"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "fileRandomizerItemActionPerformed", true ) )
					} )
				} )
				add( new FormContainer( "javax.swing.JMenu", new FormLayoutManager( class javax.swing.JMenu ) ) {
					name: "debugMenu"
					"text": "Debug"
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "consoleItem"
						"text": "Console"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "consoleItemActionPerformed", true ) )
					} )
				} )
				add( new FormContainer( "javax.swing.JMenu", new FormLayoutManager( class javax.swing.JMenu ) ) {
					name: "helpMenu"
					"text": "Help"
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "aboutItem"
						"text": "About"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "aboutItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "tutorialItem"
						"text": "Tutorial"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "tutorialItemActionPerformed", true ) )
					} )
					add( new FormComponent( "javax.swing.JPopupMenu$Separator" ) {
						name: "helpMenuSeparator1"
					} )
					add( new FormComponent( "javax.swing.JMenuItem" ) {
						name: "dspreCompatibilityItem"
						"text": "DSPRE Compatibility"
						addEvent( new FormEvent( "java.awt.event.ActionListener", "actionPerformed", "dspreCompatibilityItem", true ) )
					} )
				} )
			}
		}, new FormLayoutConstraints( null ) {
			"location": new java.awt.Point( 0, 0 )
			"size": new java.awt.Dimension( 960, 950 )
		} )
	}
}
